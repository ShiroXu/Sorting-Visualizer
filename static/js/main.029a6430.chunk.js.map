{"version":3,"sources":["logo.svg","model/MergeSort.js","model/QuickSort.js","model/HeapSort.js","model/HelperFunctions.js","controller/SortingVisualizer.jsx","model/InsertionSort.js","model/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSortAnimation","lst","start","end","bar_change_animation","mid","Math","floor","i","j","k","result","slice","push","leftElem","rightElem","quickSortAnimation","min","max","pivot_index","random","pivot_val","leftHalf","rightHalf","curr_val","new_pivot_index","length","overall_list","concat","MinHeap","this","data","randomIntFromInterval","prototype","insert","val","bubbleUp","index","parent","temp","extractMin","pop","bubbleDown","child","sibling","toSwap","clear","MAIN_BAR_COLOR","SUPPORTING_COLOR","FINISHED_COLOR","RUNNING_STATUS","Object","freeze","SortingVisualizer","props","state","bars","bar_num","running_status","not_running","animation_speed","timeoutIDs","animation_begin_at","resetBars","buf","curr_displayed_bars","document","getElementsByClassName","style","backgroundColor","setState","changing_bar_index","new_bar_height","supporting_index","currTimeoutID","setTimeout","running","prev_changing_bar_index","prev_supporting_index","id1","getElementById","display","id2","id3","method","inserting_elem","temp_animations","curr_animation","insertionSortAnimation","somethingSwapped","firstElem","secondElem","bubbleSortAnimation","heap","min_val","heapSortAnimation","displayAnimation","event","parseInt","target","value","currID","clearTimeout","clearOngoingAnimation","pausing","className","onClick","sortAndDisplay","left","initial_button_position","position","top","right","fontSize","color","fontWeight","width","type","id","onChange","speedSliderChanged","pauseAnimation","continueAnimation","stopAndResetAnimation","map","idx","height","barNumSliderChanged","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.029a6430.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function mergeSortAnimation(\n    lst, \n    start, \n    end, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n\n    if (start + 1 >= end) {\n        return;\n    }\n    const mid = Math.floor((start + end) / 2);\n    mergeSortAnimation(lst, start, mid, bar_change_animation);\n    mergeSortAnimation(lst, mid, end, bar_change_animation);\n    let i = start; //left half index\n    let j = mid; //right half index\n    let k = start; //result list index\n    let result = lst.slice();\n    while (i < mid || j < end) {\n        let temp;\n        if (i === mid) {\n            while (k < end) {\n                bar_change_animation.push([k, lst[j], j]);\n                result[k] = lst[j];\n                k += 1;\n                j += 1;\n            }\n            break;\n        }\n        if (j === end) {\n            while (k < end) {\n                bar_change_animation.push([k, lst[i], i]);\n                result[k] = lst[i];\n                k += 1;\n                i += 1;\n            }\n            break;\n        }\n        const leftElem = lst[i];\n        const rightElem = lst[j];\n        temp = result[k];\n        if (leftElem < rightElem) {\n            bar_change_animation.push([k, leftElem, j]);\n            result[k] = leftElem;\n            i += 1;\n        } else {\n            bar_change_animation.push([k, rightElem, i]);\n            result[k] = rightElem;\n            j += 1;\n        }\n        k += 1;\n    }\n    for (let i = start; i < end; i++) {\n        lst[i] = result[i];\n    }\n}","export function quickSortAnimation(\n    lst, \n    start, \n    end, \n    bar_change_animation) {\n    /*\n    This function pick the median of start and end index as the pivot   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th: new index, 1st: new height, 2nd: pivot index\n    */\n   if (start + 1 >= end) {\n       return;\n   }\n   const pivot_index = randomIntFromInterval(start, end - 1);\n   //    const mid = Math.floor((start + end) / 2);\n\n   const pivot_val = lst[pivot_index];\n   let leftHalf = [];\n   let rightHalf = [];\n   for (let i = start; i < end; i++) {\n       if (i == pivot_index) {continue}\n       const curr_val = lst[i];\n       curr_val <= pivot_val ? leftHalf.push(curr_val) : rightHalf.push(curr_val);\n   }\n   const new_pivot_index = leftHalf.length + start;\n   leftHalf.push(pivot_val);\n   const overall_list = leftHalf.concat(rightHalf);\n   for (let i = start; i < end; i++) {\n        lst[i] = overall_list[i - start];\n        bar_change_animation.push([i, lst[i], new_pivot_index]);\n    }\n   quickSortAnimation(lst, start, new_pivot_index, bar_change_animation);\n   quickSortAnimation(lst, new_pivot_index + 1, end, bar_change_animation);\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function heapSortAnimation(\n    lst, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n   var heap = new MinHeap();\n   for (let i = 0; i < lst.length; i++) {\n        bar_change_animation.push([i, lst[i]]);\n        heap.insert(lst[i]);\n   }\n    for (let i = 0; i < lst.length; i++) {\n        const min_val = heap.extractMin();\n        lst[i] = min_val;\n        bar_change_animation.push([i, min_val]);\n    }       \n}\n\n\nfunction MinHeap() {\n    this.data = [];\n  }\n  \n  MinHeap.prototype.insert = function(val) {\n    this.data.push(val);\n    this.bubbleUp(this.data.length-1);\n  };\n  \n  MinHeap.prototype.bubbleUp = function(index) {\n    while (index > 0) {\n      // get the parent\n      var parent = Math.floor((index + 1) / 2) - 1;\n      \n      // if parent is greater than child\n      if (this.data[parent] > this.data[index]) {\n        // swap\n        var temp = this.data[parent];\n        this.data[parent] = this.data[index];\n        this.data[index] = temp;\n      }\n      \n      index = parent;\n    }\n  };\n  \n  MinHeap.prototype.extractMin = function() {\n    var min = this.data[0];\n    \n    // set first element to last element\n    this.data[0] = this.data.pop();\n    \n    // call bubble down\n    this.bubbleDown(0);\n    \n    return min;\n  };\n  \n  MinHeap.prototype.bubbleDown = function(index) {\n    while (true) {\n      var child = (index+1)*2;\n      var sibling = child - 1;\n      var toSwap = null;\n      \n      // if current is greater than child\n      if (this.data[index] > this.data[child]) {\n        toSwap = child;\n      }\n      \n      // if sibling is smaller than child, but also smaller than current\n      if (this.data[index] > this.data[sibling] && (this.data[child] == null || (this.data[child] !== null && this.data[sibling] < this.data[child]))) {\n          toSwap = sibling;\n      }\n      \n      // if we don't need to swap, then break.\n      if (toSwap == null) {\n        break;\n      }\n      \n      var temp = this.data[toSwap];\n      this.data[toSwap] = this.data[index];\n      this.data[index] = temp;\n      \n      index = toSwap;\n    }\n\n    MinHeap.prototype.clear = function() {\n        this.data = [];\n    }\n  };\n  ","export function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function isArraySorted(lst) {\n    let prev_val = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < lst.length; i++) {\n        const curr_val = lst[i];\n        if (curr_val < prev_val) {\n            return false;\n        }\n        prev_val = curr_val;\n    }\n    return true;\n}","import React, { Component, useState } from 'react';\nimport reactDom from 'react-dom';\nimport '../view/SortingVisualizer.css'\nimport {mergeSortAnimation} from '../model/MergeSort.js'\nimport {quickSortAnimation} from '../model/QuickSort.js'\nimport {insertionSortAnimation} from '../model/InsertionSort.js'\nimport {bubbleSortAnimation} from '../model/BubbleSort.js'\nimport {heapSortAnimation} from '../model/HeapSort.js'\nimport {randomIntFromInterval, isArraySorted} from '../model/HelperFunctions.js'\n\nconst ANIMATION_LAG = 50;\nconst MAIN_BAR_COLOR = \"rgb(187, 145, 248)\";\nconst CHANGING_BAR_COLOR = \"rgb(252, 242, 81)\"\nconst SUPPORTING_COLOR = \"darkorange\"\nconst FINISHED_COLOR = \"mediumaquamarine\"\nconst RUNNING_STATUS = Object.freeze({'running': 'running', 'pausing': 'pausing', 'not_running': 'not_running'})\n\nexport default class SortingVisualizer extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            bars: [],\n            bar_num: 100, //determines bar num, min: 8, max: 200;\n            running_status: RUNNING_STATUS.not_running,\n            animation_speed: 2,\n            timeoutIDs: [], //for clearTimeout\n            bar_change_animation: [], //for pausing and continuing animation\n            animation_begin_at: 0 //for pausing and continuing animation\n        }\n    }\n\n    componentDidMount() {\n        this.resetBars();\n    }\n\n    resetBars() {\n        const buf = [];\n        const curr_displayed_bars = document.getElementsByClassName(\"bar\");\n        for (let i = 0; i < this.state.bar_num; i++) {\n            buf.push(randomIntFromInterval(5, 300));\n            if (curr_displayed_bars[i]) {\n                curr_displayed_bars[i].style.backgroundColor = MAIN_BAR_COLOR;\n            }\n        }\n        this.setState({bars: buf});\n    }\n\n    displayAnimation(bar_change_animation, animation_begin_at) {\n        const curr_displayed_bars = document.getElementsByClassName(\"bar\");\n        const animation_speed = 1 / (2**(this.state.animation_speed));\n        var timeoutIDs = [];\n        for (let i = animation_begin_at; i < bar_change_animation.length; i++) {\n            const changing_bar_index = bar_change_animation[i][0];\n            const new_bar_height = bar_change_animation[i][1];\n            let supporting_index = null;\n            if (bar_change_animation[i].length == 3) {\n                supporting_index = bar_change_animation[i][2];\n            }\n\n            // begin animation\n            const currTimeoutID = setTimeout(() => {\n                this.setState({running_status: RUNNING_STATUS.running});\n                if (i != 0) {\n                    const prev_changing_bar_index = bar_change_animation[i - 1][0];\n                    curr_displayed_bars[prev_changing_bar_index].style.backgroundColor = MAIN_BAR_COLOR;\n                    if (bar_change_animation[i - 1].length == 3) {\n                        const prev_supporting_index = bar_change_animation[i - 1][2];\n                        curr_displayed_bars[prev_supporting_index].style.backgroundColor = MAIN_BAR_COLOR;\n                    }\n                }\n                let buf = this.state.bars;\n                buf[changing_bar_index] = new_bar_height;\n                this.setState({bars: buf});\n                if (supporting_index) { // supporting index exist\n                    curr_displayed_bars[supporting_index].style.backgroundColor = SUPPORTING_COLOR;\n                }\n                curr_displayed_bars[changing_bar_index].style.backgroundColor = CHANGING_BAR_COLOR;\n                this.setState({animation_begin_at: i}) // keep track of current index for pausing and continuing\n            }, ANIMATION_LAG * animation_speed * (i - animation_begin_at));\n            timeoutIDs.push(currTimeoutID);\n        }\n\n        // animation stopped\n        const id1 = setTimeout(() => {\n            this.setState({animation_begin_at: 0, bar_change_animation: []});\n            document.getElementById('pause-button').style.display = 'none';\n            for (let i = 0; i < this.state.bar_num; i++) {\n                curr_displayed_bars[i].style.backgroundColor = FINISHED_COLOR;\n            }\n        }, ANIMATION_LAG * animation_speed * (bar_change_animation.length - animation_begin_at));\n        const id2 = setTimeout(() => {\n            this.setState({running_status: RUNNING_STATUS.not_running});\n        }, ANIMATION_LAG * animation_speed * (bar_change_animation.length - animation_begin_at) + 1000);\n        const id3 = setTimeout(() => {\n            this.resetBars();\n        }, ANIMATION_LAG * animation_speed * (bar_change_animation.length - animation_begin_at) + 1500);\n\n        timeoutIDs.push(id1);\n        timeoutIDs.push(id2);\n        timeoutIDs.push(id3);\n        this.setState({timeoutIDs, timeoutIDs});\n    }\n\n    sortAndDisplay(method) {\n        /*\n        method type: String\n        method cases: merge, quick, insertion, bubble, heap \n        */\n        const lst = this.state.bars.slice();\n        var bar_change_animation = [];\n        if (method === \"merge\") {\n            mergeSortAnimation(lst, 0, lst.length, bar_change_animation);\n        } else if (method === \"quick\") {\n            quickSortAnimation(lst, 0, lst.length, bar_change_animation);\n        } else if (method === \"insertion\") {\n            insertionSortAnimation(lst, bar_change_animation);\n        } else if (method === \"bubble\") {\n            bubbleSortAnimation(lst, bar_change_animation);\n        } else if (method === \"heap\") {\n            heapSortAnimation(lst, bar_change_animation);\n        } else {\n            return;\n        }\n        this.displayAnimation(bar_change_animation, 0);\n        this.setState({bar_change_animation: bar_change_animation});\n    }\n\n    barNumSliderChanged(event) {\n        const val = parseInt(event.target.value);\n        const buf = [];\n        const curr_displayed_bars = document.getElementsByClassName(\"bar\");\n        for (let i = 0; i < val; i++) {\n            buf.push(randomIntFromInterval(5, 300));\n            if (curr_displayed_bars[i]) {\n                curr_displayed_bars[i].style.backgroundColor = MAIN_BAR_COLOR;\n            }\n        }\n        this.setState({bar_num: val, bars: buf});\n    }\n\n    speedSliderChanged(event) {\n        const val = parseInt(event.target.value);\n        this.setState({animation_speed: val});\n    }\n\n    clearOngoingAnimation() {\n        const timeoutIDs = this.state.timeoutIDs;\n        if (timeoutIDs.length == 0) {\n            return;\n        }\n        for (let i = 0; i < timeoutIDs.length; i++) {\n            const currID = timeoutIDs[i];\n            clearTimeout(currID);\n        }\n    }\n\n    pauseAnimation() {\n        this.clearOngoingAnimation();\n        this.setState({running_status: RUNNING_STATUS.pausing, timeoutIDs: []});\n    }\n\n    continueAnimation() {\n        this.displayAnimation(this.state.bar_change_animation, this.state.animation_begin_at);\n    }\n\n    stopAndResetAnimation() {\n        this.clearOngoingAnimation();\n        this.setState({timeoutIDs: [], bar_change_animation: [], animation_begin_at: 0, running_status: RUNNING_STATUS.not_running});\n        this.resetBars();\n    }\n    \n    render() {\n        const bars = this.state.bars.slice();\n        const bar_num = this.state.bar_num;\n        const running_status = this.state.running_status;\n        const initial_button_position = 7;\n        const animation_speed = 2**(this.state.animation_speed);\n        return (\n            <div>\n                <div className='button-container'>\n                    <button className='button' onClick={() => this.sortAndDisplay('merge')} \n                        style={running_status == 'not_running' ? {display: 'inline-block', left: `${initial_button_position}%`} : {display: 'none'}}>Merge Sort</button>\n                    <button className='button' onClick={() => this.sortAndDisplay('quick')} \n                        style={running_status == 'not_running' ? {display: 'inline-block', left: `${initial_button_position + 15}%`} : {display: 'none'}}>Quick Sort</button>\n                    <button className='button' onClick={() => this.sortAndDisplay('insertion')} \n                        style={running_status == 'not_running' ? {display: 'inline-block', left: `${initial_button_position + 30}%`} : {display: 'none'}}>Insertion Sort</button>\n                    <button className='button' onClick={() => this.sortAndDisplay('bubble')} \n                        style={running_status == 'not_running' ? {display: 'inline-block', left: `${initial_button_position + 45}%`} : {display: 'none'}}>Bubble Sort</button>\n                    <button className='button' onClick={() => this.sortAndDisplay('heap')} \n                        style={running_status == 'not_running' ? {display: 'inline-block', left: `${initial_button_position + 60}%`} : {display: 'none'}}>Heap Sort</button>\n                    <div className='side-container' style={running_status == 'not_running' ?  {display: 'inline-block'} : {display: 'none'}}>\n                        <label style={{position: 'absolute', top: '0%', right: '-10px', fontSize: '21px', color: 'white', fontWeight: 'bold', width: '150%'}} >Animation Speed: {animation_speed}X</label>\n                        <input \n                            type=\"range\" \n                            min={0} max={4} // 2^x\n                            value={this.state.animation_speed} \n                            id=\"speedSlider\" \n                            className='speed-slider'\n                            style={running_status == 'not_running' ? {display: 'inline-block', right: '20px'} : {display: 'none'}}\n                            onChange={(event) => this.speedSliderChanged(event)}/>\n                    </div>\n\n                    <button \n                        className='button'\n                        id='pause-button'\n                        onClick={() => this.pauseAnimation()}\n                        style={running_status == 'running' ? {display: 'inline-block', left: '38%', backgroundColor: SUPPORTING_COLOR} : {display: 'none'}}\n                        > Pause </button>\n                    \n                    <button \n                        className='button'\n                        onClick={() => this.continueAnimation()}\n                        style={running_status == 'pausing' ? {display: 'inline-block', left: '38%', backgroundColor: FINISHED_COLOR} : {display: 'none'}}\n                        > Continue </button>\n                    <button \n                        className='button'\n                        onClick={() => this.stopAndResetAnimation()}\n                        style={running_status == 'not_running' ? {display: 'none'} : {display: 'inline-block', left: '53%', backgroundColor: 'crimson'}}\n                        > Stop and Reset </button>\n                    \n                </div>\n\n                <div className='bar-container'>\n                    {bars.map((val, idx) => (\n                        <div \n                        className='bar'\n                        key={idx}\n                        style={{\n                            height: `${val}px`,\n                            left: `${idx / (bar_num + 2) * 1000 + (1000 / (bar_num + 2) - 2)}px`,\n                            backgroundColor: MAIN_BAR_COLOR,\n                            width: `${1000 / (bar_num + 2) - 2}px`,\n                        }}>\n                        </div>\n                    ))}\n                    <input \n                        type=\"range\" \n                        min={8} max={200} \n                        value={this.state.bar_num} \n                        id=\"barNumSlider\" \n                        className='barnum-slider'\n                        style={running_status == 'not_running' ? {display: 'inline-block'} : {display: 'none'}}\n                        onChange={(event) => this.barNumSliderChanged(event)}/>\n                </div>\n            </div>\n        )\n    }\n}","export function insertionSortAnimation(\n    lst, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n   for (let i = 1; i < lst.length; i++) {\n       const inserting_elem = lst[i];\n       var j = i - 1; // j will be the inserting position\n       var temp_animations = [];\n       while(j >= 0 && inserting_elem < lst[j]) {\n           lst[j + 1] = lst[j];\n           temp_animations.push([j + 1, lst[j]]);\n           temp_animations.push([j, inserting_elem]);\n           j -= 1;\n       }\n       for (let k = 0; k < temp_animations.length; k++) {\n           var curr_animation = temp_animations[k];\n           curr_animation.push([j + 1]);\n           bar_change_animation.push(curr_animation);\n       }\n       lst[j + 1] = inserting_elem;\n       bar_change_animation.push([j + 1, lst[j + 1], j + 1]);\n   }\n}","export function bubbleSortAnimation(\n    lst, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n   if (lst.length <= 1) {\n       return;\n   }\n   while (true) {\n       var somethingSwapped = false;\n       for (let i = 0; i < lst.length - 1; i++) {\n           const firstElem = lst[i];\n           const secondElem = lst[i + 1];\n           if (firstElem > secondElem) {\n               lst[i] = secondElem;\n               lst[i + 1] = firstElem;\n               somethingSwapped = true;\n               bar_change_animation.push([i, secondElem]);\n               bar_change_animation.push([i + 1, firstElem]);\n           }\n       }\n       if (!somethingSwapped) {\n           break;\n       }\n   }\n}","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './controller/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","model/MergeSort.js","model/QuickSort.js","model/HeapSort.js","model/HelperFunctions.js","controller/SortingVisualizer.jsx","model/InsertionSort.js","model/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSortAnimation","lst","start","end","bar_change_animation","mid","Math","floor","i","j","k","result","slice","push","leftElem","rightElem","quickSortAnimation","min","max","pivot_index","random","pivot_val","leftHalf","rightHalf","curr_val","new_pivot_index","length","overall_list","concat","MinHeap","this","data","randomIntFromInterval","prototype","insert","val","bubbleUp","index","parent","temp","extractMin","pop","bubbleDown","child","sibling","toSwap","clear","MAIN_BAR_COLOR","SortingVisualizer","props","state","bars","bar_num","is_running","animation_speed","resetBarLengths","buf","curr_displayed_bars","document","getElementsByClassName","style","backgroundColor","setState","changing_bar_index","new_bar_height","supporting_index","setTimeout","prev_changing_bar_index","prev_supporting_index","displayAnimation","pivot","insertionSortAnimation","somethingSwapped","firstElem","secondElem","bubbleSortAnimation","heap","min_val","heapSortAnimation","event","parseInt","target","value","className","onClick","mergeSort","display","left","quickSort","initial_button_position","insertionSort","bubbleSort","heapSort","position","top","right","fontSize","color","fontWeight","type","id","onChange","speedSliderChanged","barNumSliderChanged","map","idx","height","width","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1b7fde6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function mergeSortAnimation(\n    lst, \n    start, \n    end, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n\n    if (start + 1 >= end) {\n        return;\n    }\n    const mid = Math.floor((start + end) / 2);\n    mergeSortAnimation(lst, start, mid, bar_change_animation);\n    mergeSortAnimation(lst, mid, end, bar_change_animation);\n    let i = start; //left half index\n    let j = mid; //right half index\n    let k = start; //result list index\n    let result = lst.slice();\n    while (i < mid || j < end) {\n        let temp;\n        if (i === mid) {\n            while (k < end) {\n                bar_change_animation.push([k, lst[j]]);\n                result[k] = lst[j];\n                k += 1;\n                j += 1;\n            }\n            break;\n        }\n        if (j === end) {\n            while (k < end) {\n                bar_change_animation.push([k, lst[i]]);\n                result[k] = lst[i];\n                k += 1;\n                i += 1;\n            }\n            break;\n        }\n        const leftElem = lst[i];\n        const rightElem = lst[j];\n        temp = result[k];\n        if (leftElem < rightElem) {\n            bar_change_animation.push([k, leftElem]);\n            result[k] = leftElem;\n            i += 1;\n        } else {\n            bar_change_animation.push([k, rightElem]);\n            result[k] = rightElem;\n            j += 1;\n        }\n        k += 1;\n    }\n    for (let i = start; i < end; i++) {\n        lst[i] = result[i];\n    }\n}","export function quickSortAnimation(\n    lst, \n    start, \n    end, \n    bar_change_animation) {\n    /*\n    This function pick the median of start and end index as the pivot   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th: new index, 1st: new height, 2nd: pivot index\n    */\n   if (start + 1 >= end) {\n       return;\n   }\n   const pivot_index = randomIntFromInterval(start, end - 1);\n   //    const mid = Math.floor((start + end) / 2);\n\n   const pivot_val = lst[pivot_index];\n   let leftHalf = [];\n   let rightHalf = [];\n   for (let i = start; i < end; i++) {\n       if (i == pivot_index) {continue}\n       const curr_val = lst[i];\n       curr_val <= pivot_val ? leftHalf.push(curr_val) : rightHalf.push(curr_val);\n   }\n   const new_pivot_index = leftHalf.length + start;\n   leftHalf.push(pivot_val);\n   const overall_list = leftHalf.concat(rightHalf);\n   for (let i = start; i < end; i++) {\n        lst[i] = overall_list[i - start];\n        bar_change_animation.push([i, lst[i], new_pivot_index]);\n    }\n   quickSortAnimation(lst, start, new_pivot_index, bar_change_animation);\n   quickSortAnimation(lst, new_pivot_index + 1, end, bar_change_animation);\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function heapSortAnimation(\n    lst, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n   var heap = new MinHeap();\n   for (let i = 0; i < lst.length; i++) {\n        bar_change_animation.push([i, lst[i]]);\n        heap.insert(lst[i]);\n   }\n    for (let i = 0; i < lst.length; i++) {\n        const min_val = heap.extractMin();\n        lst[i] = min_val;\n        bar_change_animation.push([i, min_val]);\n    }       \n}\n\n\nfunction MinHeap() {\n    this.data = [];\n  }\n  \n  MinHeap.prototype.insert = function(val) {\n    this.data.push(val);\n    this.bubbleUp(this.data.length-1);\n  };\n  \n  MinHeap.prototype.bubbleUp = function(index) {\n    while (index > 0) {\n      // get the parent\n      var parent = Math.floor((index + 1) / 2) - 1;\n      \n      // if parent is greater than child\n      if (this.data[parent] > this.data[index]) {\n        // swap\n        var temp = this.data[parent];\n        this.data[parent] = this.data[index];\n        this.data[index] = temp;\n      }\n      \n      index = parent;\n    }\n  };\n  \n  MinHeap.prototype.extractMin = function() {\n    var min = this.data[0];\n    \n    // set first element to last element\n    this.data[0] = this.data.pop();\n    \n    // call bubble down\n    this.bubbleDown(0);\n    \n    return min;\n  };\n  \n  MinHeap.prototype.bubbleDown = function(index) {\n    while (true) {\n      var child = (index+1)*2;\n      var sibling = child - 1;\n      var toSwap = null;\n      \n      // if current is greater than child\n      if (this.data[index] > this.data[child]) {\n        toSwap = child;\n      }\n      \n      // if sibling is smaller than child, but also smaller than current\n      if (this.data[index] > this.data[sibling] && (this.data[child] == null || (this.data[child] !== null && this.data[sibling] < this.data[child]))) {\n          toSwap = sibling;\n      }\n      \n      // if we don't need to swap, then break.\n      if (toSwap == null) {\n        break;\n      }\n      \n      var temp = this.data[toSwap];\n      this.data[toSwap] = this.data[index];\n      this.data[index] = temp;\n      \n      index = toSwap;\n    }\n\n    MinHeap.prototype.clear = function() {\n        this.data = [];\n    }\n  };\n  ","export function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function isArraySorted(lst) {\n    let prev_val = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < lst.length; i++) {\n        const curr_val = lst[i];\n        if (curr_val < prev_val) {\n            return false;\n        }\n        prev_val = curr_val;\n    }\n    return true;\n}","import React, { Component, useState } from 'react';\nimport reactDom from 'react-dom';\nimport '../view/SortingVisualizer.css'\nimport {mergeSortAnimation} from '../model/MergeSort.js'\nimport {quickSortAnimation} from '../model/QuickSort.js'\nimport {insertionSortAnimation} from '../model/InsertionSort.js'\nimport {bubbleSortAnimation} from '../model/BubbleSort.js'\nimport {heapSortAnimation} from '../model/HeapSort.js'\nimport {randomIntFromInterval, isArraySorted} from '../model/HelperFunctions.js'\n\nconst ANIMATION_LAG = 50;\nconst MAIN_BAR_COLOR = \"rgb(187, 145, 248)\";\nconst CHANGING_BAR_COLOR = \"rgb(252, 242, 81)\"\nconst SUPPORTING_COLOR = \"darkorange\"\nconst FINISHED_COLOR = \"mediumaquamarine\"\n\nexport default class SortingVisualizer extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            bars: [],\n            bar_num: 100, //determines bar num, min: 8, max: 200;\n            is_running: false,\n            animation_speed: 3\n        }\n    }\n\n    componentDidMount() {\n        this.resetBarLengths();\n    }\n\n    resetBarLengths() {\n        const buf = [];\n        const curr_displayed_bars = document.getElementsByClassName(\"bar\");\n        for (let i = 0; i < this.state.bar_num; i++) {\n            buf.push(randomIntFromInterval(5, 300));\n            if (curr_displayed_bars[i]) {\n                curr_displayed_bars[i].style.backgroundColor = MAIN_BAR_COLOR;\n            }\n        }\n        this.setState({bars: buf});\n    }\n\n    displayAnimation(bar_change_animation) {\n        const curr_displayed_bars = document.getElementsByClassName(\"bar\");\n        const animation_speed = 1 / (2**(this.state.animation_speed));\n        for (let i = 0; i < bar_change_animation.length; i++) {\n            const changing_bar_index = bar_change_animation[i][0];\n            const new_bar_height = bar_change_animation[i][1];\n            let supporting_index = null;\n            if (bar_change_animation[i].length == 3) {\n                supporting_index = bar_change_animation[i][2];\n            }\n            setTimeout(() => {\n                this.setState({is_running: true});\n                if (i != 0) {\n                    const prev_changing_bar_index = bar_change_animation[i - 1][0];\n                    curr_displayed_bars[prev_changing_bar_index].style.backgroundColor = MAIN_BAR_COLOR;\n                    if (bar_change_animation[i - 1].length == 3) {\n                        const prev_supporting_index = bar_change_animation[i - 1][2];\n                        curr_displayed_bars[prev_supporting_index].style.backgroundColor = MAIN_BAR_COLOR;\n                    }\n                }\n                let buf = this.state.bars;\n                buf[changing_bar_index] = new_bar_height;\n                this.setState({bars: buf});\n                if (supporting_index) {\n                    curr_displayed_bars[supporting_index].style.backgroundColor = SUPPORTING_COLOR;\n                }\n                curr_displayed_bars[changing_bar_index].style.backgroundColor = CHANGING_BAR_COLOR;\n            }, ANIMATION_LAG * animation_speed * i);\n        }\n        setTimeout(() => {\n            for (let i = 0; i < this.state.bar_num; i++) {\n                curr_displayed_bars[i].style.backgroundColor = FINISHED_COLOR;\n            }\n        }, ANIMATION_LAG * animation_speed * bar_change_animation.length);\n        setTimeout(() => {\n            this.setState({is_running: false});\n        }, ANIMATION_LAG * animation_speed * bar_change_animation.length + 1000);\n        setTimeout(() => {\n            this.resetBarLengths();\n        }, ANIMATION_LAG * animation_speed * bar_change_animation.length + 1500);\n    }\n\n    mergeSort() {\n        const lst = this.state.bars.slice();\n        let bar_change_animation = [];\n        mergeSortAnimation(lst, 0, lst.length, bar_change_animation);\n        this.displayAnimation(bar_change_animation);\n    }\n\n    quickSort() {\n        const lst = this.state.bars.slice();\n        let bar_change_animation = [];\n        quickSortAnimation(lst, 0, lst.length, bar_change_animation);\n        this.displayAnimation(bar_change_animation);\n    }\n\n    insertionSort() {\n        const lst = this.state.bars.slice();\n        let bar_change_animation = [];\n        insertionSortAnimation(lst, bar_change_animation);\n        this.displayAnimation(bar_change_animation);\n    }\n\n    bubbleSort() {\n        const lst = this.state.bars.slice();\n        let bar_change_animation = [];\n        bubbleSortAnimation(lst, bar_change_animation);\n        this.displayAnimation(bar_change_animation);\n    }\n\n    heapSort() {\n        const lst = this.state.bars.slice();\n        let bar_change_animation = [];\n        heapSortAnimation(lst, bar_change_animation);\n        this.displayAnimation(bar_change_animation);\n    }\n\n    barNumSliderChanged(event) {\n        const val = parseInt(event.target.value);\n        const buf = [];\n        const curr_displayed_bars = document.getElementsByClassName(\"bar\");\n        for (let i = 0; i < val; i++) {\n            buf.push(randomIntFromInterval(5, 300));\n            if (curr_displayed_bars[i]) {\n                curr_displayed_bars[i].style.backgroundColor = MAIN_BAR_COLOR;\n            }\n        }\n        this.setState({bar_num: val, bars: buf});\n    }\n\n    speedSliderChanged(event) {\n        const val = parseInt(event.target.value);\n        this.setState({animation_speed: val});\n    }\n    \n    render() {\n        const bars = this.state.bars.slice();\n        const bar_num = this.state.bar_num;\n        const is_running = this.state.is_running;\n        const initial_button_position = 7;\n        const animation_speed = 2**(this.state.animation_speed);\n        return (\n            <div>\n                <div className='button-container'>\n                    <button className='button' onClick={() => this.mergeSort()} \n                        style={is_running ? {display: 'none'} : {display: 'inline-block', left: `${initial_button_position}%`}}>Merge Sort</button>\n                    <button className='button' onClick={() => this.quickSort()} \n                        style={is_running ? {display: 'none'} : {display: 'inline-block', left: `${initial_button_position + 15}%`}}>Quick Sort</button>\n                    <button className='button' onClick={() => this.insertionSort()} \n                        style={is_running ? {display: 'none'} : {display: 'inline-block', left: `${initial_button_position + 30}%`}}>Insertion Sort</button>\n                    <button className='button' onClick={() => this.bubbleSort()} \n                        style={is_running ? {display: 'none'} : {display: 'inline-block', left: `${initial_button_position + 45}%`}}>Bubble Sort</button>\n                    <button className='button' onClick={() => this.heapSort()} \n                        style={is_running ? {display: 'none'} : {display: 'inline-block', left: `${initial_button_position + 60}%`}}>Heap Sort</button>\n                    <div className='side-container' style={is_running ? {display: 'none'} : {display: 'inline-block'}}>\n                        <label style={{position: 'absolute', top: '0%', right: '10px', fontSize: '22px', color: 'white', fontWeight: 'bold'}} > {animation_speed}X </label>\n                        <input \n                            type=\"range\" \n                            min={0} max={4} // 2^x\n                            value={this.state.animation_speed} \n                            id=\"speedSlider\" \n                            className='speed-slider'\n                            style={is_running ? {display: 'none'} : {display: 'inline-block'}}\n                            onChange={(event) => this.speedSliderChanged(event)}/>\n                    </div>\n                </div>\n\n                <div className='bar-container'>\n                    <input \n                        type=\"range\" \n                        min={8} max={200} \n                        value={this.state.bar_num} \n                        id=\"barNumSlider\" \n                        className='barnum-slider'\n                        style={is_running ? {display: 'none'} : {display: 'inline-block'}}\n                        onChange={(event) => this.barNumSliderChanged(event)}/>\n                    {bars.map((val, idx) => (\n                        <div \n                        className='bar'\n                        key={idx}\n                        style={{\n                            height: `${val}px`,\n                            left: `${idx / (bar_num + 2) * 1000 + (1000 / (bar_num + 2) - 2)}px`,\n                            backgroundColor: MAIN_BAR_COLOR,\n                            width: `${1000 / (bar_num + 2) - 2}px`,\n                        }}>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}","export function insertionSortAnimation(\n    lst, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    start & end: the segment of the array we are sorting\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n   for (let i = 1; i < lst.length; i++) {\n       const pivot = lst[i];\n       var j = i - 1;\n       while(j >= 0 && pivot < lst[j]) {\n           lst[j + 1] = lst[j];\n           bar_change_animation.push([j + 1, lst[j]]);\n           j -= 1;\n       }\n       lst[j + 1] = pivot;\n       bar_change_animation.push([j + 1, lst[j + 1]]);\n   }\n}\n\n\n// def insertionSort(arr):\n \n//     # Traverse through 1 to len(arr)\n//     for i in range(1, len(arr)):\n \n//         key = arr[i]\n \n//         # Move elements of arr[0..i-1], that are\n//         # greater than key, to one position ahead\n//         # of their current position\n//         j = i-1\n//         while j >= 0 and key < arr[j] :\n//                 arr[j + 1] = arr[j]\n//                 j -= 1\n//         arr[j + 1] = key\n ","export function bubbleSortAnimation(\n    lst, \n    bar_change_animation) {\n    /*   \n    lst: is the entire whole array\n    bar_change_animation: keeps track all intermediate changes,\n                            0th place is new index, 1st place is new height\n    */\n   if (lst.length <= 1) {\n       return;\n   }\n   while (true) {\n       var somethingSwapped = false;\n       for (let i = 0; i < lst.length - 1; i++) {\n           const firstElem = lst[i];\n           const secondElem = lst[i + 1];\n           if (firstElem > secondElem) {\n               lst[i] = secondElem;\n               lst[i + 1] = firstElem;\n               somethingSwapped = true;\n               bar_change_animation.push([i, secondElem]);\n               bar_change_animation.push([i + 1, firstElem]);\n           }\n       }\n       if (!somethingSwapped) {\n           break;\n       }\n   }\n}","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './controller/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}